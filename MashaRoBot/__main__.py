import importlib
import time
import re
from sys import argv
from typing import Optional

from MashaRoBot import (
    ALLOW_EXCL,
    CERT_PATH,
    DONATION_LINK,
    LOGGER,
    OWNER_ID,
    PORT,
    SUPPORT_CHAT,
    TOKEN,
    URL,
    WEBHOOK,
    SUPPORT_CHAT,
    dispatcher,
    StartTime,
    telethn,
    pbot,
    updater,
)

# needed to dynamically load modules
# NOTE: Module order is not guaranteed, specify that in the config file!
from MashaRoBot.modules import ALL_MODULES
from MashaRoBot.modules.helper_funcs.chat_status import is_user_admin
from MashaRoBot.modules.helper_funcs.misc import paginate_modules
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop, run_async
from telegram.utils.helpers import escape_markdown


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time


PM_START_TEXT = """
Xin ch√†o, t√¥i l√† bot qu·∫£n l√Ω [Th·ªï d√¢n üîû](https://telegra.ph/file/6525637dbd66e01f25785.jpg)
T√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω nh√≥m c·ªßa m√¨nh! Nh·∫•p *üìö CH·ª®C NƒÇNG & L·ªÜNH* b√™n d∆∞·ªõi ƒë·ªÉ t√¨m hi·ªÉu th√™m v·ªÅ c√°ch s·ª≠ d·ª•ng t√¥i v·ªõi to√†n b·ªô ch·ª©c nƒÉng c·ªßa t√¥i.
"""

buttons = [
    [
        InlineKeyboardButton(
            text="Th√™m t√¥i v√†o nh√≥m üëç", url="t.me/ThoDanRobot=true"),
    ],
    [
        InlineKeyboardButton(text="‚ÑπÔ∏è Gi·ªõi thi·ªáu", callback_data="masha_"),
        InlineKeyboardButton(text="üìö Ch·ª©c nƒÉng & l·ªánh", callback_data="help_back"),
    ],
    [
        InlineKeyboardButton(
            text="üòç Admin", callback_data="source_"),
        InlineKeyboardButton(
            text="üë• Nh√≥m ch√°t", url="t.me/thodan18"
        ),
    ],
]


HELP_STRINGS = """
*„ÄéTH·ªî D√ÇN üîû„Äè*"""


DONATE_STRING = """Kh√¥ng c·∫ßn .. t√¥i gi√†u r·ªìi"""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("MashaRoBot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Kh√¥ng th·ªÉ c√≥ hai m√¥-ƒëun c√≥ c√πng t√™n! Vui l√≤ng thay ƒë·ªïi m·ªôt")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )


@run_async
def test(update: Update, context: CallbackContext):
    # pprint(eval(str(update)))
    # update.effective_message.reply_text("Hola tester! _I_ *have* `markdown`", parse_mode=ParseMode.MARKDOWN)
    update.effective_message.reply_text("Ng∆∞·ªùi n√†y ƒë√£ s·ª≠a m·ªôt tin nh·∫Øn")
    print(update.effective_message)


@run_async
def start(update: Update, context: CallbackContext):
    args = context.args
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="Quay l·∫°i", callback_data="help_back")]]
                    ),
                )

            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "rules" in IMPORTED:
                IMPORTED["rules"].send_rules(update, args[0], from_pm=True)

        else:
            update.effective_message.reply_text(
                PM_START_TEXT,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_text(
            "T√¥i ƒëang online!\n<b>T·ªïng:</b> <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
        )


def error_handler(update, context):
    """Ghi l·∫°i l·ªói v√† g·ª≠i m·ªôt tin nh·∫Øn ƒëi·ªán t√≠n ƒë·ªÉ th√¥ng b√°o cho nh√† ph√°t tri·ªÉn."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Ngo·∫°i l·ªá trong khi x·ª≠ l√Ω m·ªôt b·∫£n c·∫≠p nh·∫≠t:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "M·ªôt ngo·∫°i l·ªá ƒë√£ ƒë∆∞·ª£c n√™u ra trong khi x·ª≠ l√Ω m·ªôt b·∫£n c·∫≠p nh·∫≠t\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


@run_async
def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "„Äå *TR·ª¢ GI√öP CHO* *{}* „Äç\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="Quay l·∫°i", callback_data="help_back")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


@run_async
def Masha_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "masha_":
        query.message.edit_text(
            text=""" ‚ÑπÔ∏è T√¥i l√† *Th·ªï D√¢n Robot*, m·ªôt bot qu·∫£n l√Ω nh√≥m m·∫°nh m·∫Ω ƒë∆∞·ª£c x√¢y d·ª±ng ƒë·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω nh√≥m c·ªßa m√¨nh m·ªôt c√°ch d·ªÖ d√†ng.
                 ‚ùç T√¥i c√≥ th·ªÉ h·∫°n ch·∫ø ng∆∞·ªùi d√πng.
                 ‚ùç T√¥i c√≥ th·ªÉ ch√†o m·ª´ng ng∆∞·ªùi d√πng b·∫±ng c√°c tin nh·∫Øn ch√†o m·ª´ng c√≥ th·ªÉ t√πy ch·ªânh v√† th·∫≠m ch√≠ thi·∫øt l·∫≠p c√°c quy t·∫Øc c·ªßa nh√≥m.
                 ‚ùç T√¥i c√≥ m·ªôt h·ªá th·ªëng ch·ªëng l≈© l·ª•t ti√™n ti·∫øn.
                 ‚ùç T√¥i c√≥ th·ªÉ c·∫£nh b√°o ng∆∞·ªùi d√πng cho ƒë·∫øn khi h·ªç ƒë·∫°t ƒë·∫øn c·∫£nh b√°o t·ªëi ƒëa, v·ªõi m·ªói h√†nh ƒë·ªông ƒë∆∞·ª£c x√°c ƒë·ªãnh tr∆∞·ªõc nh∆∞ c·∫•m, t·∫Øt ti·∫øng, ƒë√°, v.v.
                 ‚ùç T√¥i c√≥ m·ªôt h·ªá th·ªëng l∆∞u gi·ªØ ghi ch√∫, danh s√°ch ƒëen v√† th·∫≠m ch√≠ l√† c√°c c√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c x√°c ƒë·ªãnh tr∆∞·ªõc cho m·ªôt s·ªë t·ª´ kh√≥a nh·∫•t ƒë·ªãnh.
                 ‚ùç T√¥i ki·ªÉm tra quy·ªÅn c·ªßa qu·∫£n tr·ªã vi√™n tr∆∞·ªõc khi th·ª±c hi·ªán b·∫•t k·ª≥ l·ªánh n√†o v√† nhi·ªÅu n·ªôi dung kh√°c
                 \Th·ªï D√¢n Robot licensed under the GNU General Public License v3.0_
                 N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ Th·ªï D√¢n Robot, h√£y cho ch√∫ng t√¥i bi·∫øt t·∫°i @thodan18.""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                 [
                    InlineKeyboardButton(text="Quay l·∫°i", callback_data="masha_back")
                 ]
                ]
            ),
        )
    elif query.data == "masha_back":
        query.message.edit_text(
                PM_START_TEXT,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
                disable_web_page_preview=False,
        )


@run_async
def Source_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "source_":
        query.message.edit_text(
            text=""" *LINK T·ªîNG H·ª¢P C·ª¶A TH·ªî D√ÇN üîû*
                 ‚ùç t.me/joinchat/9JohJzduiJQ0Mjk1
                 ‚ùç t.me/bolac18
                 ‚ùç t.me/xomnhala
                 ‚ùç t.me/dongsinhvien
                 ‚ùç https://t.me/kenhsex
                 ‚ùç t.me/ThoDanTapChich
                 ‚ùç t.me/Gai18
                 N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ Th·ªï D√¢n Robot, h√£y cho ch√∫ng t√¥i bi·∫øt t·∫°i @thodan18..""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=False,
            reply_markup=InlineKeyboardMarkup(
                [
                 [
                    InlineKeyboardButton(text="Quay l·∫°i", callback_data="source_back")
                 ]
                ]
            ),
        )
    elif query.data == "source_back":
        query.message.edit_text(
                PM_START_TEXT,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
                disable_web_page_preview=False,
        )

@run_async
def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_text(
                f"Li√™n h·ªá v·ªõi t√¥i trong PM ƒë·ªÉ nh·∫≠n tr·ª£ gi√∫p v·ªÅ {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="Tr·ª£ gi√∫p",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_text(
            "Li√™n h·ªá v·ªõi t√¥i trong PM ƒë·ªÉ nh·∫≠n danh s√°ch c√°c l·ªánh c√≥ th·ªÉ.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="Tr·ª£ gi√∫p",
                            url="t.me/{}?start=help".format(context.bot.username),
                        )
                    ]
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "ƒê√¢y l√† tr·ª£ gi√∫p c√≥ s·∫µn cho m√¥-ƒëun *{}*:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="Quay l·∫°i", callback_data="help_back")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "ƒê√¢y l√† nh·ªØng c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa b·∫°n:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "C√≥ v·∫ª nh∆∞ kh√¥ng c√≥ b·∫•t k·ª≥ c√†i ƒë·∫∑t ng∆∞·ªùi d√πng c·ª• th·ªÉ n√†o :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="B·∫°n mu·ªën ki·ªÉm tra c√†i ƒë·∫∑t c·ªßa {} cho m√¥-ƒëun n√†o?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "C√≥ v·∫ª nh∆∞ kh√¥ng c√≥ b·∫•t k·ª≥ c√†i ƒë·∫∑t tr√≤ chuy·ªán n√†o kh·∫£ d·ª•ng :'(\nG·ª≠i c√°i n√†y v√†o "
                "trong m·ªôt nh√≥m m√† b·∫°n l√† qu·∫£n tr·ªã vi√™n ƒë·ªÉ t√¨m c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa n√≥!",
                parse_mode=ParseMode.MARKDOWN,
            )


@run_async
def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* c√≥ c√°c c√†i ƒë·∫∑t sau cho *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="Quay l·∫°i",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "Ch√†o b·∫°n! C√≥ kh√° nhi·ªÅu c√†i ƒë·∫∑t cho {} - h√£y ti·∫øp t·ª•c v√† ch·ªçn nh·ªØng g√¨ "
                "b·∫°n quan t√¢m ƒë·∫øn.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "Ch√†o b·∫°n! C√≥ kh√° nhi·ªÅu c√†i ƒë·∫∑t cho {} - h√£y ti·∫øp t·ª•c v√† ch·ªçn nh·ªØng g√¨ "
                "b·∫°n quan t√¢m ƒë·∫øn.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                text="Ch√†o b·∫°n! C√≥ kh√° nhi·ªÅu c√†i ƒë·∫∑t cho {} - h√£y ti·∫øp t·ª•c v√† ch·ªçn nh·ªØng g√¨ "
                "b·∫°n quan t√¢m ƒë·∫øn.".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c s·ª≠a ƒë·ªïi",
            "Query_id_invalid",
            "Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn",
        ]:
            LOGGER.exception("Ngo·∫°i l·ªá trong c√°c n√∫t c√†i ƒë·∫∑t. %s", str(query.data))


@run_async
def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "Nh·∫•p v√†o ƒë√¢y ƒë·ªÉ nh·∫≠n c√†i ƒë·∫∑t c·ªßa cu·ªôc tr√≤ chuy·ªán n√†y, c≈©ng nh∆∞ c·ªßa b·∫°n."
            msg.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="C√†i ƒë·∫∑t",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "B·∫•m v√†o ƒë√¢y ƒë·ªÉ ki·ªÉm tra c√†i ƒë·∫∑t c·ªßa b·∫°n."

    else:
        send_settings(chat.id, user.id, True)


@run_async
def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != 1739887825 and DONATION_LINK:
            update.effective_message.reply_text(
                "B·∫°n c≈©ng c√≥ th·ªÉ quy√™n g√≥p cho ng∆∞·ªùi hi·ªán ƒëang ƒëi·ªÅu h√†nh t√¥i "
                "[t·∫°i ƒë√¢y]({})".format(DONATION_LINK),
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
            )

            update.effective_message.reply_text(
                "T√¥i ƒë√£ PM cho b·∫°n v·ªÅ vi·ªác quy√™n g√≥p cho ng∆∞·ªùi s√°ng t·∫°o c·ªßa t√¥i!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                "Li√™n h·ªá v·ªõi t√¥i trong PM tr∆∞·ªõc ƒë·ªÉ nh·∫≠n th√¥ng tin ƒë√≥ng g√≥p."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Migrating from %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("ƒê√£ di chuy·ªÉn th√†nh c√¥ng!")
    raise DispatcherHandlerStop


def main():

    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.sendMessage(f"@{SUPPORT_CHAT}", "ƒê√£ c·∫≠p nh·∫≠t bot th√†nh c√¥ng! ü§©ü•≥")
        except Unauthorized:
            LOGGER.warning(
                "Bot kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn support_chat, h√£y ƒëi v√† ki·ªÉm tra!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)

    test_handler = CommandHandler("test", test)
    start_handler = CommandHandler("start", start)

    help_handler = CommandHandler("help", get_help)
    help_callback_handler = CallbackQueryHandler(help_button, pattern=r"help_.*")

    settings_handler = CommandHandler("settings", get_settings)
    settings_callback_handler = CallbackQueryHandler(settings_button, pattern=r"stngs_")

    about_callback_handler = CallbackQueryHandler(Masha_about_callback, pattern=r"masha_")
    source_callback_handler = CallbackQueryHandler(Source_about_callback, pattern=r"source_")

    donate_handler = CommandHandler("donate", donate)
    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)

    # dispatcher.add_handler(test_handler)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(source_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)

    dispatcher.add_error_handler(error_callback)

    if WEBHOOK:
        LOGGER.info("Using webhooks.")
        updater.start_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN)

        if CERT_PATH:
            updater.bot.set_webhook(url=URL + TOKEN, certificate=open(CERT_PATH, "rb"))
        else:
            updater.bot.set_webhook(url=URL + TOKEN)

    else:
        LOGGER.info("Using long polling.")
        updater.start_polling(timeout=15, read_latency=4, clean=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("ƒê√£ t·∫£i th√†nh c√¥ng c√°c m√¥-ƒëun: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
